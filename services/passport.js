const passport = require('passport')
const GoogleStrategy = require('passport-google-oauth20').Strategy
const keys = require('../config/key')
const mongoose = require('mongoose')

// this is only require the users model class from mongoose only 
const User = mongoose.model('users')

//what is the user paseed in here? it's the user we got from the User database down there
// done is a callback to be called when passport is done with its stuff (error, stuff)
passport.serializeUser((user, done) => {
  done(null, user.id)   //we can't assume everyone has a googleId, but everyone has a id generated by mongo
})

passport.deserializeUser((id, done) => {
  // search all users, find the user with the id, 
  User.findById(id)
      .then(user => {
        done(null, user)
  })
})

//whenever passport use google to authenticate, the GoogleStrategy instance is used
passport.use(
  new GoogleStrategy(
    {
      clientID : keys.googleClientID,
      clientSecret : keys.googleClientSecret,
      callbackURL : '/auth/google/callback'
    }, 
      //callback function called whenever the strategy is called
      (accessToken, refreshToken, profile, done) => {
        // console.log('access token: ', accessToken)
        // console.log('refresh token: ', refreshToken)
        // console.log('profile: ', profile)

        //this request to database is asynchronous, so it return a promis
        User.findOne({googleId : profile.id})
            .then((existingUser) => {
              // if there is no googleId == profile.id
              if (existingUser) {
                // we alreayd have a record with the given profile ID
                //done (nothing went wrong, user we just found)
                done(null, existingUser)
              } else {
                // we don't have a user record with this ID
                // creates an instance of a new user,  however it is not persistent yet,
                // .save() will save the instance into the database
                new User({ googleId : profile.id })
                  .save()
                  // the user here below is the instance we get back from the database, FRESH!!!
                  .then( user => done(null, user))
              }
            })
      }
  )
)

